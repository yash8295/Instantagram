'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Prompt = require('./shared/Prompt');

var _Prompt2 = _interopRequireDefault(_Prompt);

var _file_name_pattern_prompt = require('./file_name_pattern_prompt');

var _file_name_pattern_prompt2 = _interopRequireDefault(_file_name_pattern_prompt);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FileNamePlugin = function () {
  function FileNamePlugin(_ref) {
    var stdin = _ref.stdin,
        stdout = _ref.stdout;

    _classCallCheck(this, FileNamePlugin);

    this._stdin = stdin;
    this._stdout = stdout;
    this._prompt = new _Prompt2.default();
    this._projects = [];
  }

  _createClass(FileNamePlugin, [{
    key: 'apply',
    value: function apply(jestHooks) {
      var _this = this;

      jestHooks.onFileChange(function (_ref2) {
        var projects = _ref2.projects;

        _this._projects = projects;
      });
    }
  }, {
    key: 'onKey',
    value: function onKey(key) {
      this._prompt.put(key);
    }
  }, {
    key: 'run',
    value: function run(globalConfig, updateConfigAndRun) {
      var p = new _file_name_pattern_prompt2.default(this._stdout, this._prompt);
      p.updateSearchSources(this._projects);
      return new Promise(function (res, rej) {
        p.run(function (value) {
          updateConfigAndRun({ mode: 'watch', testPathPattern: value });
          res();
        }, rej);
      });
    }

    // eslint-disable-next-line class-methods-use-this

  }, {
    key: 'getUsageInfo',
    value: function getUsageInfo() {
      return {
        key: 'p',
        prompt: 'filter by a filename regex pattern'
      };
    }
  }]);

  return FileNamePlugin;
}();

module.exports = FileNamePlugin;