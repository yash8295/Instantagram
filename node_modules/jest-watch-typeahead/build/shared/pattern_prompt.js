'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _ansiEscapes = require('ansi-escapes');

var _ansiEscapes2 = _interopRequireDefault(_ansiEscapes);

var _Prompt = require('./Prompt');

var _Prompt2 = _interopRequireDefault(_Prompt);

require('./scroll');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var usage = function usage(entity
// eslint-disable-nextline prefer-template
) {
  return `\n${_chalk2.default.bold('Pattern Mode Usage')}\n` + ` ${_chalk2.default.dim('\u203A Press')} Esc ${_chalk2.default.dim('to exit pattern mode.')}\n` + ` ${_chalk2.default.dim('\u203A Press')} Enter ` + `${_chalk2.default.dim(`to apply pattern to all ${entity}.`)}\n` + `\n`;
};

var usageRows = usage('').split('\n').length;

var PatternPrompt = function () {
  function PatternPrompt(pipe, prompt) {
    _classCallCheck(this, PatternPrompt);

    this._pipe = pipe;
    this._prompt = prompt;
    this._currentUsageRows = usageRows;
  }

  _createClass(PatternPrompt, [{
    key: 'run',
    value: function run(onSuccess, onCancel, options) {
      this._pipe.write(_ansiEscapes2.default.cursorHide);
      this._pipe.write(_ansiEscapes2.default.clearScreen);

      if (options && options.header) {
        this._pipe.write(`${options.header}\n`);
        this._currentUsageRows = usageRows + options.header.split('\n').length;
      } else {
        this._currentUsageRows = usageRows;
      }

      this._pipe.write(usage(this._entityName));
      this._pipe.write(_ansiEscapes2.default.cursorShow);

      this._prompt.enter(this._onChange.bind(this), onSuccess, onCancel);
    }

    // eslint-disable-next-line no-unused-vars

  }, {
    key: '_onChange',
    value: function _onChange(pattern, options) {
      this._pipe.write(_ansiEscapes2.default.eraseLine);
      this._pipe.write(_ansiEscapes2.default.cursorLeft);
    }
  }]);

  return PatternPrompt;
}();

exports.default = PatternPrompt;