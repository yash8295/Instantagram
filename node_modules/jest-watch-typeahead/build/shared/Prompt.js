'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require('./constants');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Prompt = function () {
  function Prompt() {
    _classCallCheck(this, Prompt);

    this._onResize = this._onResize.bind(this);
  }

  _createClass(Prompt, [{
    key: '_onResize',
    value: function _onResize() {
      this._onChange(this._value);
    }
  }, {
    key: 'enter',
    value: function enter(onChange, onSuccess, onCancel) {
      var _this = this;

      this._entering = true;
      this._value = '';
      this._onSuccess = onSuccess;
      this._onCancel = onCancel;
      this._typeaheadSelection = null;
      this._typeaheadOffset = -1;
      this._typeaheadLength = 0;
      this._onChange = function () {
        return onChange(_this._value, {
          max: 10,
          offset: _this._typeaheadOffset
        });
      };

      this._onChange();

      process.stdout.on('resize', this._onResize);
    }
  }, {
    key: 'setTypeaheadLength',
    value: function setTypeaheadLength(length) {
      this._typeaheadLength = length;
    }
  }, {
    key: 'setTypheadheadSelection',
    value: function setTypheadheadSelection(selected) {
      this._typeaheadSelection = selected;
    }
  }, {
    key: 'put',
    value: function put(key) {
      switch (key) {
        case _constants.KEYS.ENTER:
          this._entering = false;
          this._onSuccess(this._typeaheadSelection || this._value);
          this.abort();
          break;
        case _constants.KEYS.ESCAPE:
          this._entering = false;
          this._onCancel(this._value);
          this.abort();
          break;
        case _constants.KEYS.ARROW_DOWN:
          this._typeaheadOffset = Math.min(this._typeaheadOffset + 1, this._typeaheadLength - 1);
          this._onChange();
          break;
        case _constants.KEYS.ARROW_UP:
          this._typeaheadOffset = Math.max(this._typeaheadOffset - 1, -1);
          this._onChange();
          break;
        case _constants.KEYS.ARROW_LEFT:
        case _constants.KEYS.ARROW_RIGHT:
          break;
        default:
          {
            this._value = key === _constants.KEYS.BACKSPACE ? this._value.slice(0, -1) : this._value + key;
            this._typeaheadOffset = -1;
            this._typeaheadSelection = null;
            this._onChange();
            break;
          }
      }
    }
  }, {
    key: 'abort',
    value: function abort() {
      this._entering = false;
      this._value = '';
      process.stdout.removeListener('resize', this._onResize);
    }
  }, {
    key: 'isEntering',
    value: function isEntering() {
      return this._entering;
    }
  }]);

  return Prompt;
}();

exports.default = Prompt;