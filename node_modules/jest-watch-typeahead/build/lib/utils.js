'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatTestNameByPattern = exports.highlight = exports.getTerminalWidth = exports.trimAndFormatPath = undefined;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _slash = require('slash');

var _slash2 = _interopRequireDefault(_slash);

var _stripAnsi = require('strip-ansi');

var _stripAnsi2 = _interopRequireDefault(_stripAnsi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-param-reassign */
var relativePath = function relativePath(config, testPath) {
  testPath = _path2.default.relative(config.cwd || config.rootDir, testPath);
  var dirname = _path2.default.dirname(testPath);
  var basename = _path2.default.basename(testPath);
  return { basename, dirname };
};

var colorize = function colorize(str, start, end) {
  return _chalk2.default.dim(str.slice(0, start)) + _chalk2.default.reset(str.slice(start, end)) + _chalk2.default.dim(str.slice(end));
};

var trimAndFormatPath = exports.trimAndFormatPath = function trimAndFormatPath(pad, config, testPath, columns) {
  var maxLength = columns - pad;
  var relative = relativePath(config, testPath);
  var basename = relative.basename;
  var dirname = relative.dirname;

  // length is ok

  if ((dirname + _path2.default.sep + basename).length <= maxLength) {
    return (0, _slash2.default)(_chalk2.default.dim(dirname + _path2.default.sep) + _chalk2.default.bold(basename));
  }

  // we can fit trimmed dirname and full basename
  var basenameLength = basename.length;
  if (basenameLength + 4 < maxLength) {
    var dirnameLength = maxLength - 4 - basenameLength;
    dirname = `...${dirname.slice(dirname.length - dirnameLength, dirname.length)}`;
    return (0, _slash2.default)(_chalk2.default.dim(dirname + _path2.default.sep) + _chalk2.default.bold(basename));
  }

  if (basenameLength + 4 === maxLength) {
    return (0, _slash2.default)(_chalk2.default.dim(`...${_path2.default.sep}`) + _chalk2.default.bold(basename));
  }

  // can't fit dirname, but can fit trimmed basename
  return (0, _slash2.default)(_chalk2.default.bold(`...${basename.slice(basename.length - maxLength - 4, basename.length)}`));
};

// $FlowFixMe
var getTerminalWidth = exports.getTerminalWidth = function getTerminalWidth() {
  return process.stdout.columns;
};

var highlight = exports.highlight = function highlight(rawPath, filePath, pattern, rootDir) {
  var trim = '...';
  var relativePathHead = './';

  var regexp = void 0;

  try {
    regexp = new RegExp(pattern, 'i');
  } catch (e) {
    return _chalk2.default.dim(filePath);
  }

  rawPath = (0, _stripAnsi2.default)(rawPath);
  filePath = (0, _stripAnsi2.default)(filePath);
  var match = rawPath.match(regexp);

  if (!match) {
    return _chalk2.default.dim(filePath);
  }

  var offset = void 0;
  var trimLength = void 0;

  if (filePath.startsWith(trim)) {
    offset = rawPath.length - filePath.length;
    trimLength = trim.length;
  } else if (filePath.startsWith(relativePathHead)) {
    offset = rawPath.length - filePath.length;
    trimLength = relativePathHead.length;
  } else {
    offset = rootDir.length + _path2.default.sep.length;
    trimLength = 0;
  }

  var start = match.index - offset;
  var end = start + match[0].length;
  return colorize(filePath, Math.max(start, 0), Math.max(end, trimLength));
};

var DOTS = '...';
var ENTER = '⏎';

var formatTestNameByPattern = exports.formatTestNameByPattern = function formatTestNameByPattern(testName, pattern, width) {
  var inlineTestName = testName.replace(/(\r\n|\n|\r)/gm, ENTER);

  var regexp = void 0;

  try {
    regexp = new RegExp(pattern, 'i');
  } catch (e) {
    return _chalk2.default.dim(inlineTestName);
  }

  var match = inlineTestName.match(regexp);

  if (!match) {
    return _chalk2.default.dim(inlineTestName);
  }

  // $FlowFixMe
  var startPatternIndex = Math.max(match.index, 0);
  var endPatternIndex = startPatternIndex + match[0].length;

  if (inlineTestName.length <= width) {
    return colorize(inlineTestName, startPatternIndex, endPatternIndex);
  }

  var slicedTestName = inlineTestName.slice(0, width - DOTS.length);

  if (startPatternIndex < slicedTestName.length) {
    if (endPatternIndex > slicedTestName.length) {
      return colorize(slicedTestName + DOTS, startPatternIndex, slicedTestName.length + DOTS.length);
    }
    return colorize(slicedTestName + DOTS, Math.min(startPatternIndex, slicedTestName.length), endPatternIndex);
  }

  return `${_chalk2.default.dim(slicedTestName)}${_chalk2.default.reset(DOTS)}`;
};